Probabilistic FastText for Multi-Sense Word Embeddings
Ben Athiwaratkun∗
Cornell University
pa338@cornell.edu
Andrew Gordon Wilson
Cornell University
andrew@cornell.edu
Anima Anandkumar
AWS & Caltech
anima@amazon.com
Abstract
We introduce Probabilistic FastText, a new
model for word embeddings that can cap-
ture multiple word senses, sub-word struc-
ture, and uncertainty information. In
particular, we represent each word with
a Gaussian mixture density, where the
mean of a mixture component is given
by the sum of n-grams. This represen-
tation allows the model to share statis-
tical strength across sub-word structures
(e.g. Latin roots), producing accurate rep-
resentations of rare, misspelt, or even un-
seen words. Moreover, each component
of the mixture can capture a different
word sense. Probabilistic FastText out-
performs both FASTTEXT, which has no
probabilistic model, and dictionary-level
probabilistic embeddings, which do not
incorporate subword structures, on sev-
eral word-similarity benchmarks, includ-
ing English RareWord and foreign lan-
guage datasets. We also achieve state-of-
art performance on benchmarks that mea-
sure ability to discern different meanings.
Thus, the proposed model is the first to
achieve multi-sense representations while
having enriched semantics on rare words.
1 Introduction
Word embeddings are foundational to natural
language processing. In order to model lan-
guage, we need word representations to contain as
much semantic information as possible. Most re-
search has focused on vector word embeddings,
such as WORD2VEC (Mikolov et al., 2013a),
where words with similar meanings are mapped
to nearby points in a vector space. Following the
∗Work done partly during internship at Amazon.
seminal work of Mikolov et al. (2013a), there have
been numerous works looking to learn efficient
word embeddings.
One shortcoming with the above approaches
to word embedding that are based on a prede-
fined dictionary (termed as dictionary-based em-
beddings) is their inability to learn representa-
tions of rare words. To overcome this limitation,
character-level word embeddings have been pro-
posed. FASTTEXT (Bojanowski et al., 2016) is
the state-of-the-art character-level approach to em-
beddings. In FASTTEXT, each word is modeled
by a sum of vectors, with each vector represent-
ing an n-gram. The benefit of this approach is that
the training process can then share strength across
words composed of common roots. For exam-
ple, with individual representations for “circum”
and “navigation”, we can construct an informa-
tive representation for “circumnavigation”, which
would otherwise appear too infrequently to learn a
dictionary-level embedding. In addition to effec-
tively modelling rare words, character-level em-
beddings can also represent slang or misspelled
words, such as “dogz”, and can share strength
across different languages that share roots, e.g.
Romance languages share latent roots.
A different promising direction involves repre-
senting words with probability distributions, in-
stead of point vectors. For example, Vilnis and
McCallum (2014) represents words with Gaussian
distributions, which can capture uncertainty infor-
mation. Athiwaratkun and Wilson (2017) gen-
eralizes this approach to multimodal probability
distributions, which can naturally represent words
with different meanings. For example, the distri-
bution for “rock” could have mass near the word
“jazz” and “pop”, but also “stone” and “basalt”.
Athiwaratkun and Wilson (2018) further devel-
oped this approach to learn hierarchical word rep-
resentations: for example, the word “music” can
ar
X
iv
:1
80
6.
02
90
1v
1 
 [
cs
.C
L
] 
 7
 J
un
 2
01
8
be learned to have a broad distribution, which en-
capsulates the distributions for “jazz” and “rock”.
In this paper, we propose Probabilistic Fast-
Text (PFT), which provides probabilistic character-
level representations of words. The resulting word
embeddings are highly expressive, yet straightfor-
ward and interpretable, with simple, efficient, and
intuitive training procedures. PFT can model rare
words, uncertainty information, hierarchical rep-
resentations, and multiple word senses. In partic-
ular, we represent each word with a Gaussian or a
Gaussian mixture density, which we name PFT-G
and PFT-GM respectively. Each component of the
mixture can represent different word senses, and
the mean vectors of each component decompose
into vectors of n-grams, to capture character-level
information. We also derive an efficient energy-
based max-margin training procedure for PFT.
We perform comparison with FASTTEXT as
well as existing density word embeddings W2G
(Gaussian) and W2GM (Gaussian mixture). Our
models extract high-quality semantics based on
multiple word-similarity benchmarks, including
the rare word dataset. We obtain an average
weighted improvement of 3.7% over FASTTEXT
(Bojanowski et al., 2016) and 3.1% over the
dictionary-level density-based models. We also
observe meaningful nearest neighbors, particu-
larly in the multimodal density case, where each
mode captures a distinct meaning. Our models are
also directly portable to foreign languages with-
out any hyperparameter modification, where we
observe strong performance, outperforming FAST-
TEXT on many foreign word similarity datasets.
Our multimodal word representation can also dis-
entangle meanings, and is able to separate differ-
ent senses in foreign polysemies. In particular,
our models attain state-of-the-art performance on
SCWS, a benchmark to measure the ability to sep-
arate different word meanings, achieving 1.0% im-
provement over a recent density embedding model
W2GM (Athiwaratkun and Wilson, 2017).
To the best of our knowledge, we are the first
to develop multi-sense embeddings with high se-
mantic quality for rare words. Our code and em-
beddings are publicly available. 1
2 Related Work
Early word embeddings which capture semantic
information include Bengio et al. (2003), Col-
1https://github.com/benathi/multisense-prob-fasttext
lobert and Weston (2008), and Mikolov et al.
(2011). Later, Mikolov et al. (2013a) developed
the popular WORD2VEC method, which proposes
a log-linear model and negative sampling ap-
proach that efficiently extracts rich semantics from
text. Another popular approach GLOVE learns
word embeddings by factorizing co-occurrence
matrices (Pennington et al., 2014).
Recently there has been a surge of interest in
making dictionary-based word embeddings more
flexible. This flexibility has valuable applica-
tions in many end-tasks such as language mod-
eling (Kim et al., 2016), named entity recogni-
tion (Kuru et al., 2016), and machine translation
(Zhao and Zhang, 2016; Lee et al., 2017), where
unseen words are frequent and proper handling of
these words can greatly improve the performance.
These works focus on modeling subword informa-
tion in neural networks for tasks such as language
modeling.
Besides vector embeddings, there is recent work
on multi-prototype embeddings where each word
is represented by multiple vectors. The learn-
ing approach involves using a cluster centroid of
context vectors (Huang et al., 2012), or adapt-
ing the skip-gram model to learn multiple latent
representations (Tian et al., 2014). Neelakan-
tan et al. (2014) furthers adapts skip-gram with
a non-parametric approach to learn the embed-
dings with an arbitrary number of senses per word.
Chen et al. (2014) incorporates an external dataset
WORDNET to learn sense vectors. We compare
these models with our multimodal embeddings in
Section 4.
3 Probabilistic FastText
We introduce Probabilistic FastText, which com-
bines a probabilistic word representation with the
ability to capture subword structure. We describe
the probabilistic subword representation in Sec-
tion 3.1. We then describe the similarity measure
and the loss function used to train the embeddings
in Sections 3.2 and 3.3. We conclude by briefly
presenting a simplified version of the energy func-
tion for isotropic Gaussian representations (Sec-
tion 3.4), and the negative sampling scheme we
use in training (Section 3.5).
3.1 Probabilistic Subword Representation
We represent each word with a Gaussian mixture
with K Gaussian components. That is, a word
beauiful
<bea
beautiful
ful>
(a)
bank
river
cash
atm
(b)
bank
river
bank
cash
atm
(c)
Figure 1: (1a) a Gaussian component and its sub-
word structure. The bold arrow represents the final
mean vector, estimated from averaging the grey
n-gram vectors. (1b) PFT-G model: Each Gaus-
sian component’s mean vector is a subword vector.
(1c) PFT-GM model: For each Gaussian mixture
distribution, one component’s mean vector is esti-
mated by a subword structure whereas other com-
ponents are dictionary-based vectors.
w is associated with a density function f(x) =∑K
i=1 pw,iN (x; ~µw,i,Σw,i) where {µw,i}Kk=1 are
the mean vectors and {Σw,i} are the covariance
matrices, and {pw,i}Kk=1 are the component prob-
abilities which sum to 1.
The mean vectors of Gaussian components hold
much of the semantic information in density em-
beddings. While these models are successful
based on word similarity and entailment bench-
marks (Vilnis and McCallum, 2014; Athiwaratkun
and Wilson, 2017), the mean vectors are often
dictionary-level, which can lead to poor semantic
estimates for rare words, or the inability to handle
words outside the training corpus. We propose us-
ing subword structures to estimate the mean vec-
tors. We outline the formulation below.
For word w, we estimate the mean vector µw
with the average over n-gram vectors and its
dictionary-level vector. That is,
µw =
1
|NGw|+ 1
vw + ∑
g∈NGw
zg
 (1)
where zg is a vector associated with an n-gram g,
vw is the dictionary representation of word w, and
NGw is a set of n-grams of word w. Examples
of 3,4-grams for a word “beautiful”, including the
beginning-of-word character ‘〈’ and end-of-word
character ‘〉’, are:
• 3-grams: 〈be, bea, eau, aut, uti, tif, ful, ul〉
• 4-grams: 〈bea, beau .., iful ,ful〉
This structure is similar to that of FASTTEXT
(Bojanowski et al., 2016); however, we note
that FASTTEXT uses single-prototype determinis-
tic embeddings as well as a training approach that
maximizes the negative log-likelihood, whereas
we use a multi-prototype probabilistic embedding
and for training we maximize the similarity be-
tween the words’ probability densities, as de-
scribed in Sections 3.2 and 3.3
Figure 1a depicts the subword structure for
the mean vector. Figure 1b and 1c depict our
models, Gaussian probabilistic FASTTEXT (PFT-
G) and Gaussian mixture probabilistic FASTTEXT
(PFT-GM). In the Gaussian case, we represent each
mean vector with a subword estimation. For the
Gaussian mixture case, we represent one Gaus-
sian component’s mean vector with the subword
structure whereas other components’ mean vec-
tors are dictionary-based. This model choice to
use dictionary-based mean vectors for other com-
ponents is to reduce to constraint imposed by the
subword structure and promote independence for
meaning discovery.
3.2 Similarity Measure between Words
Traditionally, if words are represented by vec-
tors, a common similarity metric is a dot prod-
uct. In the case where words are represented
by distribution functions, we use the general-
ized dot product in Hilbert space 〈·, ·〉L2 , which
is called the expected likelihood kernel (Jebara
et al., 2004). We define the energy E(f, g)
between two words f and g to be E(f, g) =
log〈f, g〉L2 = log
∫
f(x)g(x) dx. With Gaussian
mixtures f(x) =
∑K
i=1 piN (x; ~µf,i,Σf,i) and
g(x) =
∑K
i=1 qiN (x; ~µg,i,Σg,i),
∑K
i=1 pi = 1,
and
∑K
i=1 qi = 1, the energy has a closed form:
E(f, g) = log
K∑
j=1
K∑
i=1
piqje
ξi,j (2)
where ξj,j is the partial energy which corresponds
to the similarity between component i of the first
word f and component j of the second word g.2
ξi,j ≡ logN (0; ~µf,i − ~µg,j ,Σf,i + Σg,j)
= −1
2
log det(Σf,i + Σg,j)−
D
2
log(2π)
−1
2
(~µf,i − ~µg,j)>(Σf,i + Σg,j)−1(~µf,i − ~µg,j)
(3)
Figure 2 demonstrates the partial energies among
the Gaussian components of two words.
Interaction between GM 
components
rock:0 pop:0
pop:1rock:1
⇠0,1
⇠0,0
⇠1,1
⇠1,0
bang, 
crack, snap
basalt, 
boulder, sand
jazz, punk, 
indie
funk, 
pop-rock, 
band
Figure 2: The interactions among Gaussian com-
ponents of word rock and word pop. The par-
tial energy is the highest for the pair rock:0
(the zeroth component of rock) and pop:1 (the
first component of pop), reflecting the similarity
in meanings.
3.3 Loss Function
The model parameters that we seek to learn are vw
for each word w and zg for each n-gram g. We
train the model by pushing the energy of a true
context pair w and c to be higher than the nega-
tive context pair w and n by a margin m. We use
Adagrad (Duchi et al., 2011) to minimize the fol-
lowing loss to achieve this outcome:
L(f, g) = max [0,m− E(f, g) + E(f, n)] . (4)
We describe how to sample words as well as its
positive and negative contexts in Section 3.5.
This loss function together with the Gaussian
mixture model with K > 1 has the ability to
extract multiple senses of words. That is, for
a word with multiple meanings, we can observe
each mode to represent a distinct meaning. For in-
stance, one density mode of “star” is close to the
densities of “celebrity” and “hollywood” whereas
another mode of “star” is near the densities of
“constellation” and “galaxy”.
2The orderings of indices of the components for each word are arbitrary.
3.4 Energy Simplification
In theory, it can be beneficial to have covari-
ance matrices as learnable parameters. In prac-
tice, Athiwaratkun and Wilson (2017) observe that
spherical covariances often perform on par with
diagonal covariances with much less computa-
tional resources. Using spherical covariances for
each component, we can further simplify the en-
ergy function as follows:
ξi,j = −
α
2
· ||µf,i − µg,j ||2 , (5)
where the hyperparameter α is the scale of the in-
verse covariance term in Equation 3. We note that
Equation 5 is equivalent to Equation 3 up to an ad-
ditive constant given that the covariance matrices
are spherical and the same for all components.
3.5 Word Sampling
To generate a context word c of a given word w,
we pick a nearby word within a context window
of a fixed length `. We also use a word sampling
technique similar to Mikolov et al. (2013b). This
subsampling procedure selects words for training
with lower probabilities if they appear frequently.
This technique has an effect of reducing the impor-
tance of words such as ‘the’, ‘a’, ‘to’ which can be
predominant in a text corpus but are not as mean-
ingful as other less frequent words such as ‘city’,
‘capital’, ‘animal’, etc. In particular, word w has
probability P (w) = 1−
√
t/f(w) where f(w) is
the frequency of word w in the corpus and t is the
frequency threshold.
A negative context word is selected using a dis-
tribution Pn(w) ∝ U(w)3/4 where U(w) is a un-
igram probability of word w. The exponent 3/4
also diminishes the importance of frequent words
and shifts the training focus to other less frequent
words.
4 Experiments
We have proposed a probabilistic FASTTEXT
model which combines the flexibility of subword
structure with the density embedding approach.
In this section, we show that our probabilistic
representation with subword mean vectors with
the simplified energy function outperforms many
word similarity baselines and provides disentan-
gled meanings for polysemies.
First, we describe the training details in Section
4.1. We provide qualitative evaluation in Section
4.2, showing meaningful nearest neighbors for the
Gaussian embeddings, as well as the ability to
capture multiple meanings by Gaussian mixtures.
Our quantitative evaluation in Section 4.3 demon-
strates strong performance against the baseline
models FASTTEXT (Bojanowski et al., 2016) and
the dictionary-level Gaussian (W2G) (Vilnis and
McCallum, 2014) and Gaussian mixture embed-
dings (Athiwaratkun and Wilson, 2017) (W2GM).
We train our models on foreign language corpuses
and show competitive results on foreign word sim-
ilarity benchmarks in Section 4.4. Finally, we ex-
plain the importance of the n-gram structures for
semantic sharing in Section 4.5.
4.1 Training Details
We train our models on both English and for-
eign language datasets. For English, we use the
concatenation of UKWAC and WACKYPEDIA (Ba-
roni et al., 2009) which consists of 3.376 billion
words. We filter out word types that occur fewer
than 5 times which results in a vocabulary size of
2,677,466.
For foreign languages, we demonstrate the
training of our model on French, German, and Ital-
ian text corpuses. We note that our model should
be applicable for other languages as well. We
use FRWAC (French), DEWAC (German), ITWAC
(Italian) datasets (Baroni et al., 2009) for text cor-
puses, consisting of 1.634, 1.716 and 1.955 billion
words respectively. We use the same threshold,
filtering out words that occur less than 5 times in
each corpus. We have dictionary sizes of 1.3, 2.7,
and 1.4 million words for FRWAC, DEWAC, and
ITWAC.
We adjust the hyperparameters on the English
corpus and use them for foreign languages. Note
that the adjustable parameters for our models are
the loss margin m in Equation 4 and the scale α
in Equation 5. We search for the optimal hyperpa-
rameters in a grid m ∈ {0.01, 0.1, 1, 10, 100} and
α ∈ { 1
5×10−3 ,
1
10−3 ,
1
2×10−4 ,
1
1×10−4 } on our En-
glish corpus. The hyperpameter α affects the scale
of the loss function; therefore, we adjust the learn-
ing rate appropriately for each α. In particular, the
learning rates used are γ = {10−4, 10−5, 10−6}
for the respective α values.
Other fixed hyperparameters include the num-
ber of Gaussian components K = 2, the con-
text window length ` = 10 and the subsampling
threshold t = 10−5. Similar to the setup in FAST-
TEXT, we use n-grams where n = 3, 4, 5, 6 to es-
timate the mean vectors.
4.2 Qualitative Evaluation - Nearest
neighbors
We show that our embeddings learn the word se-
mantics well by demonstrating meaningful nearest
neighbors. Table 1 shows examples of polysemous
words such as rock, star, and cell.
Table 1 shows the nearest neighbors of polyse-
mous words. We note that subword embeddings
prefer words with overlapping characters as near-
est neighbors. For instance, “rock-y”, “rockn”,
and “rock” are both close to the word “rock”. For
the purpose of demonstration, we only show words
with meaningful variations and omit words with
small character-based variations previously men-
tioned. However, all words shown are in the top-
100 nearest words.
We observe the separation in meanings for the
multi-component case; for instance, one compo-
nent of the word “bank” corresponds to a financial
bank whereas the other component corresponds to
a river bank. The single-component case also has
interesting behavior. We observe that the subword
embeddings of polysemous words can represent
both meanings. For instance, both “lava-rock” and
“rock-pop” are among the closest words to “rock”.
4.3 Word Similarity Evaluation
We evaluate our embeddings on several standard
word similarity datasets, namely, SL-999 (Hill
et al., 2014), WS-353 (Finkelstein et al., 2002),
MEN-3k (Bruni et al., 2014), MC-30 (Miller and
Charles, 1991), RG-65 (Rubenstein and Goode-
nough, 1965), YP-130 (Yang and Powers, 2006),
MTurk(-287,-771) (Radinsky et al., 2011; Halawi
et al., 2012), and RW-2k (Luong et al., 2013).
Each dataset contains a list of word pairs with a
human score of how related or similar the two
words are. We use the notation DATASET-NUM
to denote the number of word pairs NUM in each
evaluation set. We note that the dataset RW fo-
cuses more on infrequent words and SimLex-999
focuses on the similarity of words rather than re-
latedness. We also compare PFT-GM with other
multi-prototype embeddings in the literature us-
ing SCWS (Huang et al., 2012), a word similar-
ity dataset that is aimed to measure the ability of
embeddings to discern multiple meanings.
We calculate the Spearman correlation (Spear-
man, 1904) between the labels and our scores gen-
Word Co. Nearest Neighbors
rock 0 rock:0, rocks:0, rocky:0, mudrock:0, rockscape:0, boulders:0 , coutcrops:0,
rock 1 rock:1, punk:0, punk-rock:0, indie:0, pop-rock:0, pop-punk:0, indie-rock:0, band:1
bank 0 bank:0, banks:0, banker:0, bankers:0, bankcard:0, Citibank:0, debits:0
bank 1 bank:1, banks:1, river:0, riverbank:0, embanking:0, banks:0, confluence:1
star 0 stars:0, stellar:0, nebula:0, starspot:0, stars.:0, stellas:0, constellation:1
star 1 star:1, stars:1, star-star:0, 5-stars:0, movie-star:0, mega-star:0, super-star:0
cell 0 cell:0, cellular:0, acellular:0, lymphocytes:0, T-cells:0, cytes:0, leukocytes:0
cell 1 cell:1, cells:1, cellular:0, cellular-phone:0, cellphone:0, transcellular:0
left 0 left:0, right:1, left-hand:0, right-left:0, left-right-left:0, right-hand:0, leftwards:0
left 1 left:1, leaving:0, leavings:0, remained:0, leave:1, enmained:0, leaving-age:0, sadly-departed:0
Word Nearest Neighbors
rock rock, rock-y, rockn, rock-, rock-funk, rock/, lava-rock, nu-rock, rock-pop, rock/ice, coral-rock
bank bank-, bank/, bank-account, bank., banky, bank-to-bank, banking, Bank, bank/cash, banks.**
star movie-stars, star-planet, G-star, star-dust, big-star, starsailor, 31-star, star-lit, Star, starsign, pop-stars
cell cellular, tumour-cell, in-cell, cell/tumour, 11-cell, T-cell, sperm-cell, 2-cells, Cell-to-cell
left left, left/joined, leaving, left,right, right, left)and, leftsided, lefted, leftside
Table 1: Nearest neighbors of PFT-GM (top) and PFT-G (bottom). The notation w:i denotes the ith
mixture component of the word w.
D 50 300
W2G W2GM PFT-G PFT-GM FASTTEXT W2G W2GM PFT-G PFT-GM
SL-999 29.35 29.31 27.34 34.13 38.03 38.84 39.62 35.85 39.60
WS-353 71.53 73.47 67.17 71.10 73.88 78.25 79.38 73.75 76.11
MEN-3K 72.58 73.55 70.61 73.90 76.37 78.40 78.76 77.78 79.65
MC-30 76.48 79.08 73.54 79.75 81.20 82.42 84.58 81.90 80.93
RG-65 73.30 74.51 70.43 78.19 79.98 80.34 80.95 77.57 79.81
YP-130 41.96 45.07 37.10 40.91 53.33 46.40 47.12 48.52 54.93
MT-287 64.79 66.60 63.96 67.65 67.93 67.74 69.65 66.41 69.44
MT-771 60.86 60.82 60.40 63.86 66.89 70.10 70.36 67.18 69.68
RW-2K 28.78 28.62 44.05 42.78 48.09 35.49 42.73 50.37 49.36
AVG. 42.32 42.76 44.35 46.47 49.28 47.71 49.54 49.86 51.10
Table 2: Spearman’s Correlation ρ× 100 on Word Similarity Datasets.
erated by the embeddings. The Spearman corre-
lation is a rank-based correlation measure that as-
sesses how well the scores describe the true labels.
The scores we use are cosine-similarity scores be-
tween the mean vectors. In the case of Gaussian
mixtures, we use the pairwise maximum score:
s(f, g) = max
i∈1,...,K
max
j∈1,...,K
µf,i · µg,j
||µf,i|| · ||µg,j ||
. (6)
The pair (i, j) that achieves the maximum cosine
similarity corresponds to the Gaussian component
pair that is the closest in meanings. Therefore, this
similarity score yields the most related senses of a
given word pair. This score reduces to a cosine
similarity in the Gaussian case (K = 1).
4.3.1 Comparison Against Dictionary-Level
Density Embeddings and FASTTEXT
We compare our models against the dictionary-
level Gaussian and Gaussian mixture embed-
dings in Table 2, with 50-dimensional and 300-
dimensional mean vectors. The 50-dimensional
results for W2G and W2GM are obtained directly
from Athiwaratkun and Wilson (2017). For com-
parison, we use the public code3 to train the 300-
dimensional W2G and W2GM models and the pub-
licly available FASTTEXT model4.
We calculate Spearman’s correlations for each
of the word similarity datasets. These datasets
vary greatly in the number of word pairs; there-
fore, we mark each dataset with its size for visibil-
3https://github.com/benathi/word2gm
4https://s3-us-west-1.amazonaws.com/fasttext-vectors/wiki.
en.zip
ity. For a fair and objective comparison, we cal-
culate a weighted average of the correlation scores
for each model.
Our PFT-GM achieves the highest average score
among all competing models, outperforming both
FASTTEXT and the dictionary-level embeddings
W2G and W2GM. Our unimodal model PFT-G also
outperforms the dictionary-level counterpart W2G
and FASTTEXT. We note that the model W2GM
appears quite strong according to Table 2, beating
PFT-GM on many word similarity datasets. How-
ever, the datasets that W2GM performs better than
PFT-GM often have small sizes such as MC-30
or RG-65, where the Spearman’s correlations are
more subject to noise. Overall, PFT-GM outper-
forms W2GM by 3.1% and 8.7% in 300 and 50 di-
mensional models. In addition, PFT-G and PFT-GM
also outperform FASTTEXT by 1.2% and 3.7% re-
spectively.
4.3.2 Comparison Against Multi-Prototype
Models
In Table 3, we compare 50 and 300 dimensional
PFT-GM models against the multi-prototype em-
beddings described in Section 2 and the existing
multimodal density embeddings W2GM. We use
the word similarity dataset SCWS (Huang et al.,
2012) which contains words with potentially many
meanings, and is a benchmark for distinguishing
senses. We use the maximum similarity score
(Equation 6), denoted as MAXSIM. AVESIM de-
notes the average of the similarity scores, rather
than the maximum.
We outperform the dictionary-based density
embeddings W2GM in both 50 and 300 dimen-
sions, demonstrating the benefits of subword in-
formation. Our model achieves state-of-the-art re-
sults, similar to that of Neelakantan et al. (2014).
4.4 Evaluation on Foreign Language
Embeddings
We evaluate the foreign-language embeddings
on word similarity datasets in respective lan-
guages. We use Italian WORDSIM353 and Ital-
ian SIMLEX-999 (Leviant and Reichart, 2015) for
Italian models, GUR350 and GUR65 (Gurevych,
2005) for German models, and French WORD-
SIM353 (Finkelstein et al., 2002) for French mod-
els. For datasets GUR350 and GUR65, we use
the results reported in the FASTTEXT publication
(Bojanowski et al., 2016). For other datasets, we
train FASTTEXT models for comparison using the
Model Dim ρ× 100
HUANG AVGSIM 50 62.8
TIAN MAXSIM 50 63.6
W2GM MAXSIM 50 62.7
NEELAKANTAN AVGSIM 50 64.2
PFT-GM MAXSIM 50 63.7
CHEN-M AVGSIM 200 66.2
W2GM MAXSIM 200 65.5
NEELAKANTAN AVGSIM 300 67.2
W2GM MAXSIM 300 66.5
PFT-GM MAXSIM 300 67.2
Table 3: Spearman’s Correlation ρ× 100 on word
similarity dataset SCWS.
public code5 on our text corpuses. We also train
dictionary-level models W2G, and W2GM for com-
parison.
Table 4 shows the Spearman’s correlation re-
sults of our models. We outperform FASTTEXT on
many word similarity benchmarks. Our results are
also significantly better than the dictionary-based
models, W2G and W2GM. We hypothesize that
W2G and W2GM can perform better than the cur-
rent reported results given proper pre-processing
of words due to special characters such as accents.
We investigate the nearest neighbors of poly-
semies in foreign languages and also observe clear
sense separation. For example, piano in Italian
can mean “floor” or “slow”. These two meanings
are reflected in the nearest neighbors where one
component is close to piano-piano, pianod which
mean “slowly” whereas the other component is
close to piani (floors), istrutturazione (renovation)
or infrastruttre (infrastructure). Table 5 shows ad-
ditional results, demonstrating that the disentan-
gled semantics can be observed in multiple lan-
guages.
4.5 Qualitative Evaluation - Subword
Decomposition
One of the motivations for using subword infor-
mation is the ability to handle out-of-vocabulary
words. Another benefit is the ability to help im-
prove the semantics of rare words via subword
sharing. Due to an observation that text corpuses
follow Zipf’s power law (Zipf, 1949), words at the
tail of the occurrence distribution appears much
5https://github.com/facebookresearch/fastText.git
Lang. Evaluation FASTTEXT w2g w2gm pft-g pft-gm
FR WS353 38.2 16.73 20.09 41.0 41.3
DE
GUR350 70 65.01 69.26 77.6 78.2
GUR65 81 74.94 76.89 81.8 85.2
IT
WS353 57.1 56.02 61.09 60.2 62.5
SL-999 29.3 29.44 34.91 29.3 33.7
Table 4: Word similarity evaluation on foreign languages.
Word Meaning Nearest Neighbors
(IT) secondo 2nd Secondo (2nd), terzo (3rd) , quinto (5th), primo (first), quarto (4th), ultimo (last)
(IT) secondo according to conformit (compliance), attenendosi (following), cui (which), conformemente (accordance with)
(IT) porta lead, bring portano (lead), conduce (leads), portano, porter, portando (bring), costringe (forces)
(IT) porta door porte (doors), finestrella (window), finestra (window), portone (doorway), serratura (door lock)
(FR) voile veil voiles (veil), voiler (veil), voilent (veil), voilement, foulard (scarf), voils (veils), voilant (veiling)
(FR) voile sail catamaran (catamaran), driveur (driver), nautiques (water), Voile (sail), driveurs (drivers)
(FR) temps weather brouillard (fog), orageuses (stormy), nuageux (cloudy)
(FR) temps time mi-temps (half-time), partiel (partial), Temps (time), annualis (annualized), horaires (schedule)
(FR) voler steal envoler (fly), voleuse (thief), cambrioler (burgle), voleur (thief), violer (violate), picoler (tipple)
(FR) voler fly airs (air), vol (flight), volent (fly), envoler (flying), atterrir (land)
Table 5: Nearest neighbors of polysemies based on our foreign language PFT-GM models.
less frequently. Training these words to have
a good semantic representation is challenging if
done at the word level alone. However, an n-
gram such as ‘abnorm’ is trained during both oc-
currences of “abnormal” and “abnormality” in the
corpus, hence further augments both words’s se-
mantics.
Figure 3 shows the contribution of n-grams to
the final representation. We filter out to show only
the n-grams with the top-5 and bottom-5 similarity
scores. We observe that the final representations
of both words align with n-grams “abno”, “bnor”,
“abnorm”, “anbnor”, “<abn”. In fact, both “ab-
normal” and “abnormality” share the same top-5
n-grams. Due to the fact that many rare words
such as “autobiographer”, “circumnavigations”, or
“hypersensitivity” are composed from many com-
mon sub-words, the n-gram structure can help im-
prove the representation quality.
5 Numbers of Components
It is possible to train our approach with K > 2
mixture components; however, Athiwaratkun and
Wilson (2017) observe that dictionary-level Gaus-
sian mixtures with K = 3 do not overall im-
prove word similarity results, even though these
mixtures can discover 3 distinct senses for certain
words. Indeed, while K > 2 in principle allows
for greater flexibility than K = 2, most words can
be very flexibly modelled with a mixture of two
Figure 3: Contribution of each n-gram vector to
the final representation for word “abnormal” (top)
and “abnormality” (bottom). The x-axis is the co-
sine similarity between each n-gram vector z(w)g
and the final vector µw.
Gaussians, leading to K = 2 representing a good
balance between flexibility and Occam’s razor.
Even for words with single meanings, our
PFT model with K = 2 often learns richer repre-
sentations than a K = 1 model. For example, the
two mixture components can learn to cluster to-
gether to form a more heavy tailed unimodal distri-
bution which captures a word with one dominant
meaning but with close relationships to a wide
range of other words.
In addition, we observe that our model with K
components can capture more than K meanings.
For instance, in K = 1 model, the word pairs
(“cell”, “jail”) and (“cell”, “biology”) and (“cell”,
“phone”) will all have positive similarity scores
based on K = 1 model. In general, if a word
has multiple meanings, these meanings are usually
compressed into the linear substructure of the em-
beddings (Arora et al., 2016). However, the pairs
of non-dominant words often have lower similar-
ity scores, which might not accurately reflect their
true similarities.
6 Conclusion and Future Work
We have proposed models for probabilistic word
representations equipped with flexible sub-word
structures, suitable for rare and out-of-vocabulary
words. The proposed probabilistic formulation in-
corporates uncertainty information and naturally
allows one to uncover multiple meanings with
multimodal density representations. Our models
offer better semantic quality, outperforming com-
peting models on word similarity benchmarks.
Moreover, our multimodal density models can
provide interpretable and disentangled representa-
tions, and are the first multi-prototype embeddings
that can handle rare words.
Future work includes an investigation into the
trade-off between learning full covariance ma-
trices for each word distribution, computational
complexity, and performance. This direction can
potentially have a great impact on tasks where
the variance information is crucial, such as for hi-
erarchical modeling with probability distributions
(Athiwaratkun and Wilson, 2018).
Other future work involves co-training PFT on
many languages. Currently, existing work on
multi-lingual embeddings align the word seman-
tics on pre-trained vectors (Smith et al., 2017),
which can be suboptimal due to polysemies. We
envision that the multi-prototype nature can help
disambiguate words with multiple meanings and
facilitate semantic alignment.
References
Sanjeev Arora, Yuanzhi Li, Yingyu Liang, Tengyu
Ma, and Andrej Risteski. 2016. Linear al-
gebraic structure of word senses, with appli-
cations to polysemy. CoRR abs/1601.03764.
http://arxiv.org/abs/1601.03764.
Ben Athiwaratkun and Andrew Gordon Wilson.
2017. Multimodal word distributions. In ACL.
https://arxiv.org/abs/1704.08424.
Ben Athiwaratkun and Andrew Gordon Wilson. 2018.
On modeling hierarchical data via probabilistic or-
der embeddings. ICLR .
Marco Baroni, Silvia Bernardini, Adriano Fer-
raresi, and Eros Zanchetta. 2009. The wacky
wide web: a collection of very large linguis-
tically processed web-crawled corpora. Lan-
guage Resources and Evaluation 43(3):209–226.
https://doi.org/10.1007/s10579-009-9081-4.
Yoshua Bengio, Réjean Ducharme, Pascal Vin-
cent, and Christian Janvin. 2003. A neu-
ral probabilistic language model. Journal
of Machine Learning Research 3:1137–1155.
http://www.jmlr.org/papers/v3/bengio03a.html.
Piotr Bojanowski, Edouard Grave, Armand Joulin, and
Tomas Mikolov. 2016. Enriching word vectors
with subword information. CoRR abs/1607.04606.
http://arxiv.org/abs/1607.04606.
Elia Bruni, Nam Khanh Tran, and Marco Ba-
roni. 2014. Multimodal distributional se-
mantics. J. Artif. Int. Res. 49(1):1–47.
http://dl.acm.org/citation.cfm?id=2655713.2655714.
Xinxiong Chen, Zhiyuan Liu, and Maosong Sun.
2014. A unified model for word sense represen-
tation and disambiguation. In Proceedings of the
2014 Conference on Empirical Methods in Natural
Language Processing, EMNLP 2014, October 25-
29, 2014, Doha, Qatar, A meeting of SIGDAT, a Spe-
cial Interest Group of the ACL. pages 1025–1035.
http://aclweb.org/anthology/D/D14/D14-1110.pdf.
Ronan Collobert and Jason Weston. 2008. A uni-
fied architecture for natural language processing:
deep neural networks with multitask learning. In
Machine Learning, Proceedings of the Twenty-
Fifth International Conference (ICML 2008),
Helsinki, Finland, June 5-9, 2008. pages 160–167.
http://doi.acm.org/10.1145/1390156.1390177.
John C. Duchi, Elad Hazan, and Yoram Singer.
2011. Adaptive subgradient methods for on-
line learning and stochastic optimization. Jour-
nal of Machine Learning Research 12:2121–2159.
http://dl.acm.org/citation.cfm?id=2021068.
Lev Finkelstein, Evgeniy Gabrilovich, Yossi Matias,
Ehud Rivlin, Zach Solan, Gadi Wolfman, and Eytan
Ruppin. 2002. Placing search in context: the con-
cept revisited. ACM Trans. Inf. Syst. 20(1):116–131.
http://doi.acm.org/10.1145/503104.503110.
Iryna Gurevych. 2005. Using the structure of a concep-
tual network in computing semantic relatedness. In
Natural Language Processing - IJCNLP 2005, Sec-
ond International Joint Conference, Jeju Island, Ko-
rea, October 11-13, 2005, Proceedings. pages 767–
778.
Guy Halawi, Gideon Dror, Evgeniy Gabrilovich, and
Yehuda Koren. 2012. Large-scale learning of
word relatedness with constraints. In The 18th
ACM SIGKDD International Conference on Knowl-
edge Discovery and Data Mining, KDD ’12, Bei-
jing, China, August 12-16, 2012. pages 1406–1414.
http://doi.acm.org/10.1145/2339530.2339751.
Felix Hill, Roi Reichart, and Anna Korhonen. 2014.
Simlex-999: Evaluating semantic models with (gen-
uine) similarity estimation. CoRR abs/1408.3456.
http://arxiv.org/abs/1408.3456.
Eric H. Huang, Richard Socher, Christopher D. Man-
ning, and Andrew Y. Ng. 2012. Improving word
representations via global context and multiple word
prototypes. In The 50th Annual Meeting of the As-
sociation for Computational Linguistics, Proceed-
ings of the Conference, July 8-14, 2012, Jeju Island,
Korea - Volume 1: Long Papers. pages 873–882.
http://www.aclweb.org/anthology/P12-1092.
Tony Jebara, Risi Kondor, and Andrew Howard. 2004.
Probability product kernels. Journal of Machine
Learning Research 5:819–844.
Yoon Kim, Yacine Jernite, David Sontag, and Alexan-
der M. Rush. 2016. Character-aware neural lan-
guage models. In Proceedings of the Thirtieth AAAI
Conference on Artificial Intelligence, February 12-
17, 2016, Phoenix, Arizona, USA.. pages 2741–
2749.
Onur Kuru, Ozan Arkan Can, and Deniz Yuret. 2016.
Charner: Character-level named entity recogni-
tion. In COLING 2016, 26th International Con-
ference on Computational Linguistics, Proceed-
ings of the Conference: Technical Papers, Decem-
ber 11-16, 2016, Osaka, Japan. pages 911–921.
http://aclweb.org/anthology/C/C16/C16-1087.pdf.
Jason Lee, Kyunghyun Cho, and Thomas
Hofmann. 2017. Fully character-level
neural machine translation without ex-
plicit segmentation. TACL 5:365–378.
https://transacl.org/ojs/index.php/tacl/article/view/1051.
Ira Leviant and Roi Reichart. 2015. Judgment lan-
guage matters: Multilingual vector space models for
judgment language aware lexical semantics. CoRR
abs/1508.00106. http://arxiv.org/abs/1508.00106.
Minh-Thang Luong, Richard Socher, and Christo-
pher D. Manning. 2013. Better word representations
with recursive neural networks for morphology. In
CoNLL. Sofia, Bulgaria.
Tomas Mikolov, Kai Chen, Greg Corrado, and Jeffrey
Dean. 2013a. Efficient estimation of word repre-
sentations in vector space. CoRR abs/1301.3781.
http://arxiv.org/abs/1301.3781.
Tomas Mikolov, Kai Chen, Greg Corrado, and Jeffrey
Dean. 2013b. Efficient estimation of word repre-
sentations in vector space. CoRR abs/1301.3781.
http://arxiv.org/abs/1301.3781.
Tomas Mikolov, Stefan Kombrink, Lukás Burget, Jan
Cernocký, and Sanjeev Khudanpur. 2011. Exten-
sions of recurrent neural network language model.
In Proceedings of the IEEE International Confer-
ence on Acoustics, Speech, and Signal Processing,
ICASSP 2011, May 22-27, 2011, Prague Congress
Center, Prague, Czech Republic. pages 5528–5531.
https://doi.org/10.1109/ICASSP.2011.5947611.
George A. Miller and Walter G. Charles. 1991.
Contextual Correlates of Semantic Similarity.
Language & Cognitive Processes 6(1):1–28.
https://doi.org/10.1080/01690969108406936.
Arvind Neelakantan, Jeevan Shankar, Alexandre Pas-
sos, and Andrew McCallum. 2014. Efficient non-
parametric estimation of multiple embeddings per
word in vector space. In Proceedings of the 2014
Conference on Empirical Methods in Natural Lan-
guage Processing, EMNLP 2014, October 25-29,
2014, Doha, Qatar, A meeting of SIGDAT, a Spe-
cial Interest Group of the ACL. pages 1059–1069.
http://aclweb.org/anthology/D/D14/D14-1113.pdf.
Jeffrey Pennington, Richard Socher, and Christo-
pher D. Manning. 2014. Glove: Global vectors for
word representation. In Proceedings of the 2014
Conference on Empirical Methods in Natural Lan-
guage Processing, EMNLP 2014, October 25-29,
2014, Doha, Qatar, A meeting of SIGDAT, a Spe-
cial Interest Group of the ACL. pages 1532–1543.
http://aclweb.org/anthology/D/D14/D14-1162.pdf.
Kira Radinsky, Eugene Agichtein, Evgeniy
Gabrilovich, and Shaul Markovitch. 2011. A
word at a time: Computing word relatedness
using temporal semantic analysis. In Proceed-
ings of the 20th International Conference on
World Wide Web. WWW ’11, pages 337–346.
http://doi.acm.org/10.1145/1963405.1963455.
Herbert Rubenstein and John B. Goode-
nough. 1965. Contextual correlates of syn-
onymy. Commun. ACM 8(10):627–633.
http://doi.acm.org/10.1145/365628.365657.
Samuel L. Smith, David H. P. Turban, Steven Ham-
blin, and Nils Y. Hammerla. 2017. Offline bilin-
gual word vectors, orthogonal transformatio