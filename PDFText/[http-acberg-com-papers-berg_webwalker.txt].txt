Approximating Aggregate Queries about Web Pages via
Random Walks 
Ziv Bar-Yossefy Alexander Berg Steve Chienz Jittat Fakcharoenpholx
Dror Weitz{
Computer Science Division
University of California at Berkeley
387 Soda Hall #1776, Berkeley, CA 94720-1776
U.S.A.
fzivi,aberg,schien,jittat,drorg@cs.berkeley.edu
Abstract
We present a random walk as an eÆcient
and accurate approach to approximating cer-
tain aggregate queries about web pages. Our
method uses a novel random walk to produce
an almost uniformly distributed sample of web
pages. The walk traverses a dynamically built
regular undirected graph. Queries we have es-
timated using this method include the cover-
age of search engines, the proportion of pages
belonging to .com and other domains, and the
average size of web pages. Strong experimen-
tal evidence suggests that our walk produces
accurate results quickly using very limited re-
sources.
1 Introduction
Timely and accurate statistics about web pages are be-
coming increasingly important for academic and com-
mercial use. Some relevant questions are: What per-
cent of web pages are in the .com domain? How many
This work used the Berkeley Now machines, supported by
grant CDA-9401156
y Supported by NSF Grant CCR-9820897
z Supported by NSF Graduate Research Fellowship
x Supported by the Faculty of Engineering Kasetsart Uni-
versity Scholarship and by the Fulbright Scholarship
{ Supported by the University of California Regents
Fellowship
Permission to copy without fee all or part of this material is
granted provided that the copies are not made or distributed for
direct commercial advantage, the VLDB copyright notice and
the title of the publication and its date appear, and notice is
given that copying is by permission of the Very Large Data Base
Endowment. To copy otherwise, or to republish, requires a fee
and/or special permission from the Endowment.
Proceedings of the 26th VLDB Conference,
Cairo, Egypt, 2000.
pages are indexed by a particular search engine? What
is the distribution of sizes, modication times, and
content of web pages? These questions can be writ-
ten as either aggregate queries or selection queries. We
present a method for eÆciently and accurately approx-
imating the results of these and other similar queries.
In order to answer these questions we need to esti-
mate the size of certain sets of web pages. In particu-
lar, given a user dened boolean predicate, p, we want
to estimate the fraction of all web pages that would
satisfy a selection query using p. We also want to es-
timate the results of aggregate queries about all web
pages. For example we might estimate the average
number of bytes in a web page.
We present an eÆcient solution, requiring small
amounts of computing power, storage space, and net-
work bandwidth. Starting from scratch, we can ac-
curately estimate results for the previously mentioned
queries in as little as a few days using one PC with a
modest connection to the Internet. Furthermore, given
additional time and network bandwidth, our method
can produce increasingly accurate results.
It is important to understand that there is no com-
plete, current index of the web. The web is a hypertext
corpus connected by a link structure, and it is possi-
ble to traverse (crawl) this link structure in order to
obtain an index of the web. Unfortunately even the
fastest crawls require 3 to 4 months to visit a large
fraction of the web, and must utilize signicant com-
puter and network resources. When combined with
the fact that thousands of pages are added, modied,
and deleted every day this means that an index of the
web generated by a crawl will be neither current nor
complete.
1.1 Our Solution: RandomWalks for Uniform
Sampling
In order to estimate the results of aggregate queries
or the fraction of all web pages that would satisfy a
selection query for a given predicate, we will use ran-
dom sampling. First, a uniformly distributed sample
of web pages will be produced. It will then be used
to estimate the quantities in question. The fraction
of sampled web pages that satisfy a predicate is an
estimate for the fraction of all web pages that would
satisfy the predicate.
It is important to note that the accuracy of the
random sampling technique depends on the selectivity
of the predicate. In particular if a large fraction of all
web pages satisfy the predicate, then the estimate will
be more accurate than if a very small fraction of all
web pages satisfy the predicate.
In order to produce a uniformly distributed sample
of web pages without an index of all web pages, we
will use ideas from the theory of random walks. It
is well known that random walks on regular 1 undi-
rected graphs can provide a close to uniformly dis-
tributed sample of nodes. Unfortunately the web is
neither undirected, nor regular. We present a method
to simultaneously walk the web and a dynamically gen-
erated graph G. The graph G has a node for each web
page discovered on the web, but is regular and undi-
rected. As the walk progresses it produces a close to
uniformly distributed sample of web pages.
The next important question is how quickly our pro-
cess can produce a close to uniformly distributed sam-
ple of web pages. The answer to this question is re-
lated to the structure of the generated graph G. We
have analyzed the structure of the web obtained from
a large Alexa [1] crawl circa 1996 to conclude that such
a walk can converge extremely fast. We also demon-
strate that, in fact, the walk we implement quickly
nds an apparently close to uniformly distributed set
of pages from this crawl.
Our random walk strategy is nally validated by re-
sults on the web today. In section 4 we compare our
estimate for the distribution of web pages by domain
(.com .edu .net .org, etc.), to that published by Ink-
tomi as a result of a recent and extensive crawl over
a period of four months. We also compare estimates
for the size of the search engines FAST and AltaVista.
In the rst case the approximations we obtain from
our approach in one to two days are consistent with
those of Inktomi's extensive crawl. The coverage esti-
mates for FAST and AltaVista are also consistent with
various other estimates. These results provide strong
evidence that our walk performs well.
1A graph is regular if all its nodes have an equal number of
incident edges.
1.2 Outline
We begin by describing an ideal but unrealizable ran-
dom walk on the web in Section 2. We then describe
our random walk, a close approximation of the ideal
one, in Section 3. We present strong experimental ev-
idence that our walk works well and applications of
our walk to aggregate queries about the current web
in Section 4. Section 5 discusses related work and Sec-
tion 6 concludes.
2 Ideal Random Walk on the Web
In this section we develop an idealized random walk
on the web. This ideal random walk will be provably
accurate and eÆcient, but unfortunately cannot be im-
plemented. Nevertheless, it provides a useful model for
our actual random walk, described in Section 3.
2.1 The Indexable Web
Before explaining our random walk on the web, we
must rst dene what we mean by \the web". A recent
experiment [12] suggests that the structure of the web
is similar to that shown in Figure 1. According to this
model the web graph divides into four parts of roughly
equivalent size:
(1) A giant strongly connected component (the largest
subset of nodes from which every pair of nodes are mu-
tually reachable from one another by following links).
(2) A \right" side containing pages reachable from (1),
but which cannot reach (1) in return.
(3) A \left" side whose pages can reach (1), but are
not reachable from (1) in return.
(4) All the rest (other small connected components, or
pages that link to the right side or are linked from the
left side).
We refer to the union of (1) and (2) as the \in-
dexable" web, since this is the part that is easily ex-
plored by most users and search engines, and that ar-
guably contains most of the meaningful content of the
web. Our random walk and experiments are conducted
mainly on this part of the web.
2.2 Random Walks on Graphs
In its most general form a random walk on a graph
is simply what its name suggests. Let G = (V;E)
be a (directed or undirected) graph, where V =
fv1; v2; : : : ; vNg is the set of vertices and E the col-
lection of edges. A random walk is then a stochastic
process that iteratively visits the vertices of the graph.
The next vertex of the walk is chosen by following a
randomly chosen outgoing edge from the current one.
The nodes visited by a random walk can be written as
a sequence x0; x1; x2; : : :. Furthermore, since the walk
is random, it makes sense to describe the state of a
random walk after t steps as a probability distribution
Xt over the graph's vertices, described as a vector of
length N .
(4)
(3)
(1) (2)
Figure 1: Web Graph Structure
The web can be naturally described as a graph W
with pages as vertices and hyperlinks as directed edges,
and for the remainder of this paper it will be conve-
nient to identify vertices with pages and edges with
links.
Our goal was to develop a random walk on the web's
graph structure that satises two criteria: rst, the
walk's state (Xt) should approach the uniform distri-
bution, and second, the number of steps required for
the walk to approach this distribution should be rea-
sonably small.
It turns out that the web's graph structure is un-
wieldy and the straightforward random walk of ran-
domly choosing a link from the current page will not
work. The straightforward walk will have a heavy bias
towards high-degree nodes, may become trapped in
leaves, and requires too many steps to run.
We now describe the ideal (and unattainable) sce-
nario in which such a simple scheme would perform
well, and discuss our approximation of it in Section 3.
2.3 The Ideal Walk: Uniform Distribution
Ideally, our random walk will be a Markov chain on
a connected, undirected, regular graph. Walks with
these properties can be proven to eventually approach
a uniform distribution over the vertices of the graph.
A Markov chain is a memoryless walk over a graph
in that the choice of the next vertex depends only on
the current vertex and not the previous history of the
walk. In our case, from its current vertex, the walk
will choose the next vertex by following an outgoing
edge chosen uniformly at random.
A Markov chain can be described entirely by its
transition matrix P , describing one step of the Markov
chain as Xt+1 = XtP . This simplicity makes it rela-
tively easy to analyze specic Markov chains, including
our ideal random walk.
In particular, when the underlying graph is con-
nected, undirected, and regular, we can show that our
rst desired property is satised: our random walk
will converge to the uniform probability distribution.
(The connectedness property ensures that the random
walk has a limiting distribution, and undirectedness
and regularity guarantee that this distribution is uni-
form.)
Unfortunately the natural web graph W initially
meets none of these three conditions, but we can mod-
ify it to satisfy them. We rst make each edge in W
undirected, meaning that our random walk can now
follow links either forwards or backwards. This makes
the graph undirected. (It is connected because we con-
sider only the indexable web.) It is still not regular,
since some pages will have higher degree than others.
This can be xed by adding a dierent number of self-
loops to each page so that every page ends up with the
same number of links as the original vertex of maxi-
mum degree. We will denote this maximal degree as
d.
The nal graph W
0
thus ts all three requirements
and our random walk over this graph will approach
a uniform distribution. Since our walk is a Markov
chain, we can associate it with a transition matrix
PW 0 . See Figure 2 for a complete description of the
ideal walk.
2.4 The Ideal Walk: Feasibility
We now need to determine the ideal walk's mixing
time, or the number of steps the walk must make be-
fore reaching a distribution acceptably close to uni-
form. A well known convergence theorem from the
theory of Markov chains shows that for our case, the
mixing time is bounded by O( 1

logN) steps, where N
Ideal Visit(v) f
I := all in-neighbors of v
O := all out-neighbors of v
w := d  jI [ Oj
Compute the number of self loop steps
spent at v (distributes geometrically
with parameter 1  w
d
)
Select a random u 2 I [O
Ideal Visit(u)
g
Figure 2: Ideal Walk's Visit Function
is the total number of pages inW 0. Here  is the eigen-
value gap of our Markov chain, or j1j  j2j, where 1
and 2 are the eigenvalues of PW 0 with largest and
second largest absolute value. The eigenvalue gap is
a measure of the conductance of the Markov chain; a
large eigenvalue gap indicates that there are few bot-
tlenecks or isolated parts of the graph. In this case
the walk will avoid becoming trapped and approach
the uniform distribution rapidly.
It is impractical to compute the eigenvalue gap of
PW 0 , since this would require complete knowledge of
the web's structure. We do have access to a large crawl
of the indexable web from 1996, however, and were
able to use brute force to determine that the eigen-
value gap for the undirected regular graph there was
 = 10 5. If a similar gure is still true today, and es-
timating the current size of the web as approximately
109, the convergence theorem above shows that the
mixing time of the ideal random walk is on the order
of 3,000,000 steps. We will denote the mixing time as
 .
The prospect of our walk performing this many web
accesses would seem a little daunting, but we are saved
by the observation that most of the steps of the ideal
walk are self-loops, which do not require a web access.
Furthermore, we do not need to simulate each self-loop
step separately. The number of consecutive self-loops
our ideal walk takes at each page can be modeled by
a geometric random variable, so that one calculation
can simulate many steps of the actual walk. In fact,
on the undirected regular 1996 graph, each page had
a degree of 300,000, but an average of only ten links
which were not self-loops. Thus only 1 in 30,000 steps
of the random walk is not a self-loop and requires a web
access, meaning that a 3,000,000 step walk requires
only 100 actual web accesses, a very feasible number.
2.5 Subset Sampling Procedure
The above ideal random walk meets our initial require-
ments: it produces nearly uniform samples from the
web and runs in a small amount of time. We now
show how we can apply this to one of our main appli-
cations, estimating the relative size of subsets of the
web. (We will also use the same procedure to estimate
the results of aggregate queries.)
Suppose we have a subset A of all web pages VW
(with jVW j = N) whose relative size we wish to es-
timate. The most obvious method would be to re-
peatedly run the walk T times for  steps to obtain
a nearly uniform distribution, and then choose the
walk's current page as a sample point. While work-
able, this approach is not ideal. Aldous [10] proposes
a more eÆcient sampling procedure: Instead of run-
ning T walks of length  Aldous suggests we run only
one walk of length +k, and use the last k nodes as the
sample points, disregarding the rst  steps as sample
delay. Gilman [13] and Kahale [16] prove that k =
O( 1

1
2
jAj
N
log 1
Æ
) steps are suÆcient to obtain a (; Æ)
approximation. This means that after this many steps,
we will have Pr[(1  ) jAj
N
 s
k
 (1 + ) jAj
N
]  1  Æ,
where s is the number of sample pages that belong to
A. This allows us to save a factor of logN random
walk steps over the naive approach.
With the above estimates of the eigenvalue gap 
and the size of the web N , this result shows that if we
wish to estimate the size of a subset A that comprises
at least 20% of the web to within 10% accuracy with
99% condence, we will need 350,000,000 random walk
steps, of which only about 12,000 will not be self-loops.
2.6 Lessons from the Ideal Walk
What all of this demonstrates is that the ideal walk,
if we could realize it, would provide a reliable and ex-
cellent tool for uniform random sampling and subset
estimation on the web. Unfortunately we cannot im-
plement this walk, since we cannot follow links back-
wards, a crucial step in our design. We now describe
how our actual walk approximates this model, and the
results we obtain from it.
3 WebWalker - Realization of a Ran-
dom Walk on the Web
Realization of the ideal random walk scheme described
in Section 2.3 requires the following primitives:
1. Determining the degree of a given page v (i.e., the
number of incoming and outgoing links it has).
2. Given a page v and an index i 2 f1; : : : ; dg, se-
lecting the ith neighbor of v.
The rst primitive is needed for computing the self
loop weight of v, and the second for choosing a random
neighbor of v. A straightforward solution for both is
to retrieve the list of all incoming and outgoing links of
v, and then infer from this list the degree of v and the
chosen random neighbor. Obtaining all the outgoing
links of v is easy: we just have to extract the links
from its HTML text. Getting the list of incoming links
is, however, more intricate. We can acquire incoming
links from two sources:
1. The walk itself - if the walk visits a page u with
a link to v before it visits v, it can know of this
link at the time it visits v.
2. Search engines - some search engines (AltaVista
[2], Go [4], Google [5], HotBot [6], and Lycos [8])
allow one to retrieve all the pages they index that
contain a link to a given page v.
These two sources of incoming links are not suÆcient
to implement the primitives mentioned above. First,
they might miss some of the incoming links. Suppose
there exists a link u! v. If the walk does not visit u
before it visits v and none of the search engines indexes
u, then the walk will not be aware of the link u! v at
the time it visits v. Second, the search engines return
at most 1000 links for each queried page. Thus, for
pages with a much larger number of incoming links we
have access to only a small fraction of these links.
The inability to obtain all the incoming links of
a page v, or even to know their exact number, pre-
vents us from fully realizing the above primitives. This
means that there is no obvious way to realize the ideal
undirected regular random walk on the web. We now
describe WebWalker - a new random walking process
that attempts to come close to the ideal random walk,
given only limited knowledge of incoming links.
3.1 WebWalker Specication
WebWalker performs a regular undirected random
walk while exploring the web, using the above men-
tioned link resources (i.e., the HTML text, the walk
itself, and the search engines). As WebWalker tra-
verses the web it builds a d-regular undirected graph
that is used to determine the next step of the walk.
Each time WebWalker visits a new page it adds a cor-
responding node v to the graph. At this point we will
determine and x for the remainder of the walk the
d edges (possibly including self-loops) incident to v.
More explicitly, denote by N(v) the set of v's neigh-
bors that are available from the above resources the
rst time WebWalker visits v. WebWalker considers
only pages inN(v) to be neighbors of v throughout the
walk. If it happens to discover a new link u! v later,
it ignores this link and does not add u to N(v). This
is done in order to ensure consistency in the graph on
which WebWalker walks: we want to make sure that
the exact same set of neighbors is available to Web-
Walker every time it visits v. The importance of this
feature will become apparent in Section 3.2.
The self loop weight assigned to v is d   jN(v)j.
Each time WebWalker visits v, it rst calculates the
number of self loop steps spent at v, and then picks
a random page in N(v) to be visited next. Figure 3
species the Visit function run by WebWalker when it
visits a page v.
WebWalker Visit(v) f
If v was already visited, skip to SELF
I := r random in-neighbors of v from the
ones returned by the search engines
O := all out-neighbors of v
For all u 2 (I [ O) nN(v) do f
if u was not visited yet f
add u to N(v)
add v to N(u)
g
g
SELF:
w := d  jN(v)j
Compute the number of self loop steps
spent at v (distributes geometrically
with parameter 1  w
d
)
SELECT:
Select a random u 2 N(v)
If u is ``bad'' go back to SELECT
WebWalker Visit(u)
g
Figure 3: WebWalker's Visit Function
We also choose the following implementation pa-
rameters for WebWalker:
 WebWalker's starting point is an arbitrary page in
the largest strongly connected component of the
web. We usually start from www.yahoo.com.
 WebWalker uses AltaVista and HotBot as sources
for incoming links. For each visited page it re-
trieves up to 20 links from AltaVista and up to
100 links from HotBot.
 From the set of candidate in-neighbors of v re-
turned by the search engines, WebWalker picks
only r at random (r is a parameter of Web-
Walker). This is done in order to reduce bias
towards pages covered by the search engines (see
Sections 3.2 and 4.1 for details).
 The degree d with which WebWalker computes
the self loop weight of each visited node needs
to bound the web's maximal degree. Note that
choosing a loose upper bound makes no dier-
ence, since it only increases the number of self
loop steps. Therefore, we pick a crude overesti-
mate of d = 10; 000; 000.
 We consider a page u to be \bad" (in which case
we do not visit it, even if it is selected) in one of
the following cases: (1) it is not a static HTML
page, (2) we cannot establish a connection to it
within 3 minutes, or (3) its URL address is longer
than 300 characters.
3.2 WebWalker Analysis
We next analyze WebWalker's performance. We show
that WebWalker is a Markovian random walk not on
the web graph itself, but rather on a subgraph of the
web. This subgraph is built on the y as WebWalker
explores the web. Since this subgraph is designed to be
connected, undirected, and regular, WebWalker con-
verges to a uniform stationary distribution over its
nodes.
We then show that this subgraph always covers the
whole indexable web, which means WebWalker can
generate uniform samples from the indexable web. We
nally address the question of how long it takes Web-
Walker to converge to the uniform stationary distribu-
tion. We do not have a satisfactory theoretical answer
to this question, but we point out the factors that inu-
ence the mixing time. We show that in early stages of
the walk WebWalker might suer from biases towards
high degree pages and pages covered by the search en-
gines. Experiments (described in Section 4) show that
in practice, these biases are small.
Assume we could run WebWalker innitely long.
Let G be a subgraph of the web that contains all
the nodes visited and all the edges traversed by Web-
Walker during this run. We call G the induced sub-
graph of WebWalker's run.
G does not necessarily contain all the edges of the
web. At the rst time WebWalker visits a page v, it
xes its neighbor set N(v), and ignores any further
links to v it encounters later. Thus, only edges of the
form (v; u) for u 2 N(v) will be traversed by Web-
Walker, and therefore included in G.
The subgraph G depends on the random choices
made by WebWalker. For example, if v is a page that
is not covered by any of the search engines and v ! u
is an outgoing edge from v, then only if WebWalker
happens to visit v before it visits u, is v ! u included
in G. We conclude that G is a random variable that de-
pends on the walk itself. Dierent runs of WebWalker
may yield dierent induced subgraphs.
WebWalker behaves as a Markovian random walk
onG. Furthermore, by denition G is connected, undi-
rected, and regular. Therefore, WebWalker is guaran-
teed to converge to a uniform stationary distribution
over its nodes. There are two questions left open: (1)
what fraction of the web is G guaranteed to cover?
and (2) how fast does WebWalker approach the uni-
form distribution over the nodes of G? The following
proposition provides an encouraging answer to the rst
question.
Proposition 1 In any innite run of WebWalker, G
covers the whole indexable web.
Proof: Let v be some node in the indexable web.
Thus, there exists a directed path v0; : : : ; vk = v
of \good" (i.e., not \bad") pages from WebWalker's
starting point v0 to v (since v0 belongs to the largest
strongly connected component). We prove by induc-
tion on i (i = 0; : : : ; k) that vi 2 G. It follows that in
particular v = vk belongs to G.
The base case i = 0 is easy: WebWalker starts from
v0, therefore v0 2 G. Assume v0; : : : ; vi 2 G. Con-
sider the edge (vi; vi+1). Since vi 2 G, vi is visited by
WebWalker. Let t be the rst time WebWalker visits
vi. vi+1 will not be included in N(vi) only if it was
visited before. But in this case vi+1 already belongs
to G, and we are done.
Therefore, assume vi+1 2 N(vi). Since the graph G
on which WebWalker walks is nite, undirected, and
connected, in any innite run WebWalker visits each
node in G (and in particular, vi) innitely often. Since
N(vi) is nite, all the nodes in N(vi) will be picked to
be visited next at some point. When vi+1 is picked
by WebWalker it is also visited, since vi+1 is a \good"
page. Hence, vi+1 2 G. 2
Note that G may also contain parts of the non-
indexable web, if the search engines index these parts.
In order for WebWalker to be useful for sampling
from the indexable web, we need to make sure that
with high probability it converges quickly to the uni-
form stationary distribution over the vertex set of G.
The eigenvalue gap analysis made for the web graph
(see Section 2.4) does not hold for G, since G is only a
subgraph of the web. If G misses many edges from the
web its eigenvalue gap may be much smaller, implying
a long mixing time for WebWalker. Unfortunately, we
currently do not have any theoretical analysis of the
mixing time of WebWalker as a random walk on the
graph G.
We suspect that during its early stages WebWalker
might be biased towards certain kinds of pages. We
identied three sources of potential bias:
(1) Bias towards high degree nodes. The walk will
tend to discover high degree nodes earlier than low de-
gree nodes, because high degree nodes have many more
short paths leading to them from the walk's starting
point than low degree nodes.
(2) Bias towards nodes covered by the search en-
gines. Since WebWalker uses some search engines as a
source of incoming links, it is more likely to visit pages
covered by these search engines than ones that are not.
(3) Bias towards the neighborhood of the walk's
starting point.
The lack of theoretical foundation compels us to re-
sort to experimental evaluation of WebWalker's con-
vergence rate. Section 4.1 presents the results of such
experiments, in which we ran WebWalker on a copy of
the web from 1996. We use the above potential biases
as indicators for evaluating how close WebWalker is to
the uniform distribution (small biases indicate conver-
gence).
4 Experiments
We performed experiments using WebWalker to esti-
mate the size of certain subsets of webpages, and to
estimate the answer to various aggregate queries about
web pages. These experiments were run in Febru-
ary 2000. In addition we also ran WebWalker on a
graph created from a large crawl of the web performed
in 1996. Because we had access to all the nodes in
the graph we can quantitatively evaluate WebWalker's
performance and biases on the 1996 web graph.
4.1 Evaluation Experiments
In order to observeWebWalker's eectiveness and bias,
we performed a 100,000 page walk on the 1996 web
graph. Ideally the samples from this walk, when
weighted by self-loops, would be uniformly distributed
over all nodes. In order to see how close the samples
were to uniform, we compared them to a number of
known sets. The sets we considered were: 10 sets each
containing one decile of nodes ordered by degree, 10
sets each containing one decile of nodes in breadth rst
search order from the starting node for WebWalker,
and the set of nodes contained in the search engine
(see below) used for incoming links.
As discussed in Section 3.2, WebWalker may suf-
fer from biases at early stages of the walk. The ex-
periments were designed to address three sources of
possible bias: (1) bias towards nodes with high degree
in the web graph, (2) bias towards the neighborhood
of WebWalker's starting page, and (3) bias towards
nodes indexed by the search engine(s) used for incom-
ing links.
An obstacle to running WebWalker on the 1996 web
graph is that we do not know which of the 1996 pages
were covered by the search engines at that time. In-
stead, we designate an arbitrary subset of the nodes
as the search engine index. Thus, the incoming edges
WebWalker discovers come from nodes already visited
and from nodes in the designated search engine sub-
set. Unless stated otherwise the experiments in this
section used 50% of the 1996 web graph as the search
engine set.
The experimental results shown in this section also
show the eect of changing r, the number of incoming
links we take from the search engine for each visited
page (see Section 3.1). WebWalker was run using r =
0, r = 3, and r = 10.
Figure 4 shows the distribution of nodes from two
walks accumulated into bins by degree. The nodes
in the 1996 web graph are sorted by degree and then
separated into 10 deciles, each containing 10% of the
nodes. For each decile the bar chart shows the per-
centage of nodes in a walk that had a degree in the
range specied. More or fewer than 10% of the nodes
in the walk in a particular range shows a bias in the
walk. From this graph we see that 24% of the walk
with r = 0 was spent in the top 10%, an overestimate
of 14%. By taking r = 3 we see that the bias towards
the top 10% of nodes is decreased to an overestimate
of 9%. We also notice for both walks that the bias is
concentrated in the top 10% of nodes by degree. There
is relatively little bias in the other deciles, and even the
nodes in the lowest decile are estimated well.
10% 20% 30% 40% 50% 60% 70% 80% 90% 100%
0
5
10
15
20
25
30
35
40
Deciles of nodes ordered by degree
P
er
ce
n
t 
o
f 
n
o
d
es
 f
ro
m
 w
al
k
0 incoming links from search engines per page
3 incoming links from search engines per page
Figure 4: Percent of nodes in two walks on the 1996
web graph by decile of the nodes ordered by degree.
For example, the leftmost bar indicates that 24% of
the pages in the walk using r = 0 were among nodes
ranked in the top 10% by degree in the 1996 web graph.
Figure 5 shows the nodes of two walks divided into
neighborhoods of WebWalker's starting point. The
two walks shown use parameters r = 0 and r = 3,
respectively. All the nodes in the 1996 web graph are
ordered by a BFS starting at WebWalker's initial node.
They are then divided into 10 equal sized, consecutive
sets. The small variations from a uniform distribu-
tion indicate that WebWalker has little bias toward
its starting neighborhood.
Figure 6 shows the percent of nodes from each of six
walks that were also in the search engine for each walk.
The rst three use 30% of the 1996 web graph as a
search engine, and various values for r. The last three
use 50% of the 1996 web graph as a search engine. We
see from the results that there is a small bias toward
10% 20% 30% 40% 50% 60% 70% 80% 90% 100%
0
5
10
15
20
25
30
35
40
Deciles of nodes ordered by BFS from starting node
P
er
ce
n
t 
o
f 
n
o
d
es
 f
ro
m
 w
al
k
0 incoming links from search engines per page
3 incoming links from search engines per page
Figure 5: Percent of nodes in the walk on the 1996
web graph by decile of nodes ordered by breadth rst
search distance from the walk's starting node. For
example, the leftmost bar indicates that 10.5% of the
nodes in the walk using r = 0 were among the rst
10% of all nodes when ordered by a BFS starting with
WebWalker's initial node.
the search engine, and that the bias increases as more
incoming links are taken from the search engine.
We have observed in our experiments that increas-
ing the number of links taken from a search engine
increases the bias toward that search engine, an unde-
sirable eect. At the same time increasing the number
of incoming links taken from search engines decreases
the bias toward high degree nodes. Based on the ex-
periments on the 1996 web graph we found r = 3 to
be a good compromise.
We conclude that from the biases we examined that
only the bias towards the highest degree nodes is sig-
nicant.
4.2 Subset Size and Aggregate Query Approx-
imation Experiments
Next, we show a avor of the approximations of web
subsets one can perform using WebWalker. We ran
WebWalker on the current web (February 2000) and
tried to approximate the relative size of the following
subsets:
(1) The pages that can be returned as query re-
sults by AltaVista [2]. WebWalker uses AltaVista as
a source for incoming links. We wished to check the
eect this has on the approximation of AltaVista.
(2) The pages that can be returned as query results
by the FAST search engine [3] (formerly called \All
the Web") WebWalker does not use FAST as a source
for incoming links.
(3) The overlap of AltaVista and FAST (pages that
are covered by both).
(4) The pages that contain inline images.
30% 50%
0
10
20
30
40
50
60
70
Search engine size relative to the entire 1996 web graph
E
st
im
at
e 
o
f 
se
ar
ch
 e
n
g
in
e 
si
ze
0 incoming links from search engines per page 
3 incoming links from search engines per page 
10 incoming links from search engines per page
Figure 6: Percent of nodes in six walks that are also
contained in the search engine used for incoming links
in those walk. For example, the leftmost bar indicates
that 28.9% of the nodes in the r = 0 walk were actually
in the search engine comprised of 30% of all nodes in
the 1996 web graph.
In order to check whether a given sample page be-
longs to a search engine (e.g., FAST or AltaVista) we
extract a list of features from the page (its URL and
title and the list of phrases it contains) and repeatedly
query the search engine for pages that contain one of
these features. We determine that the page is covered
by the search engine if we nd the exact URL (after
normalization) of the page in the results of one of these
queries. Note that if the search engine keeps only one
copy for mirrored sites, this method might determine
that a page is not included in the search engine index,
although it actually is (it is simply not returned by the
search engine as a result of a query). Therefore, the ac-
tual coverage of the search engine might be somewhat
larger than what is reected by our approximations.
The approximations we obtained for the relative
size of FAST, AltaVista, their intersection, and the
image set are presented in Table 1. Reports for the
FAST and AltaVista indexes [9] were about 300 mil-
lion pages and 250 million pages respectively. This
means that the ratio between them should be about
1.2. Our approximations come close with a ratio of
1.14. This may indicate that the bias of WebWalker
towards AltaVista (compared to FAST) is not signif-
icant. These results were obtained from three walks
with a total of 41,384 page accesses.
In addition we wanted to evaluate the following ag-
gregate queries about the web:
(1) The distribution of pages according to the last
part of their domain name (com, edu, org, and others)
(2) The average size of static HTML pages.
(3) The average number of hyperlinks in static
HTML pages.
Set Size
Approximation
FAST 39.97%
AltaVista 35.46%
FAST \ AltaVista 21.13%
Images 72.60%
Table 1: Web Subset Approximations
The approximations we obtain for domain name dis-
tributions are based on a combination of 21 runs of
WebWalker, with a total of 146,133 page accesses. To
validate the accuracy of the resulting approximations
we compare them against similar tests made in Febru-
ary, 2000 by Inktomi [7], which based their estimations
on an extensive 1 billion page index of the web.2
The 14 largest domains ( and .mil) together with
their relative sizes are presented in Table 2. We
give the corresponding Inktomi approximations, when
available, for reference.
Domain Our Inktomi
Approximation Approximation
.com 49.15% 54.68%
.edu 8.28% 6.69%
.org 6.55% 4.35%
.net 5.60% 7.82%
.de 3.67%
.jp 2.87%
.uk 2.75%
.gov 2.08% 1.15%
.ca 1.58%
.au 1.37%
.us 1.12%
.fr 1.01%
.se 0.98%
.it 0.94%
...
.mil 0.19% 0.17%
Table 2: Largest Internet Domains
The average page size and the average number of
links in a page are presented in Table 3.
2Note that in order to generate this index, Inktomi needed
powerful computational and network resources and four months
of work.
Query Approximation
Average size (in bytes) 11,655
Average number of hyperlinks 9.56
Table 3: Aggregate Query Approximations for Static
HTML Pages
5 Related Work
Several recent attempts have been made to estimate
the size and/or quality of various search engines' in-
dexes. All of this previous work requires obtaining a
sample of pages in some way. In some cases the idea
is to obtain a uniformly distributed sample, while in
others it is to nd a sample weighted by a particular
metric.
Henzinger et al. [15] used a large number of ran-
dom walks designed to converge to Google's [5] page
rank distribution over the nodes walked. This dis-
tribution favors popular pages. They then attempt
to remove the bias by sampling pages from the walk
based on the inverse of an estimate for the page rank
of each page. They used a random graph model for the
web, and produced data showing a clear bias towards
high degree nodes. This bias is diÆcult to compare
with our own since the random graph model used did
not exhibit many properties of the 1996 web graph we
used. For instance the 1996 web graph has signicantly
higher maximum degree, which could potentially cause
a much larger bias in their walk. Their results on the
web also indicate a bias towards Google, possibly the
result of a bias toward pages with a high page rank.
Their approach seems to require many more page ac-
cesses to get approximations than the one presented in
this paper. This work was carried out independently
to our own, over a similar time-frame, and is an ex-
tension of their previous work on approximating page
rank using random walks [14].
Bharat and Broder [11] attempted to generate ran-
dom pages in a search engine index by constructing
random queries. These pages were then used to es-
timate the relative size and overlap of various search
engines. Their queries were based on a dictionary of
words collected from Yahoo!, and the resulting sample
was therefore biased towards English language pages.
Also, because they combined several terms in their
queries, they note a bias towards content rich pages.
Lawrence and Giles [17, 18] report the sizes of sev-
eral search engines based on the number of pages re-
turned in response to 1,050 actual queries. They note
that the resulting pages are not uniformly distributed
and use the results to discuss what might be called
the useful size of a search engine, instead of measur-
ing the total number of pages indexed. In addition
they attempted to approximate the size of the web by
estimating the number of web servers (via sampling
random IP addresses and querying for a server) and
multiplying by an estimate for the number of pages
per site. They note, as do others, that the distribu-
tion of pages per server has a very high variance, and
that their estimates are susceptible to inaccuracy as a
result.
6 Conclusions
We have presented an eÆcient and accurate method
for estimating the results of aggregate queries on web
pages in the indexable web. We achieve this by per-
forming a carefully designed random walk to produce
a close to uniformly distributed sample of web pages.
We have validated the walk in extensive experiments
on the web today as well as on a large portion of the
web from 1996 obtained by an ALEXA crawl. Further-
more, our technique is extremely eÆcient, and can pro-
duce uniformly distributed web pages quickly without
signicant computation or network resources. In fact,
our estimates are reproducible on a single PC with a
modest connection to the Internet in as little as one to
two days.
One particularly interesting application of our tech-
nique is estimating the fraction of web pages covered
by a particular search engine. This can be extended
to a less biased mechanism for comparing search en-
gine coverage. Furthermore, with accurate knowledge
of the absolute size of a search engine, we can estimate
the size of the web.
This technique opens up many new interesting ques-
tions. We would like to obtain stronger theoretical
analysis of WebWalker's mixing time to support our
experimental results. In addition, we would like to
further reduce the bias towards high degree nodes and
pages inde